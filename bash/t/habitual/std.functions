#!/bin/bash
# vim: et sr sw=4 ts=4 smartindent syntax=sh:
#
# TESTS for habitual/std.functions

# ... for logging functions 
EXPECTED_PREFIX="$(basename $0)"
EXPECTED_DEBUG_PREFIX="$(realpath -- $0)" # horrid, but no better way

# ... for str_to_safe_chars()
STR_ASCII="$(for((i=32;i<=127;i++)) do printf \\$(printf '%03o\t' "$i"); done;printf "\n")@"
STR_UTF8_COPYRIGHT="$INPUT_STR_ASCII$(printf '\xC2\xA9')"
STR_UTF8_FLAT_E="cafe attache mate trema"
UTF8_ACUTE_E="$(printf '\xC3\xA9')" # e with acute accent

run_safe_chars_posix() {
    local loc=POSIX
    ( loc="$loc" _run_safe_chars "$1" "$2" "$3" ) || return 1
}

run_safe_chars_utf8() {
    local loc=en_US.UTF-8
    ( loc="$loc" _run_safe_chars "$1" "$2" "$3" ) || return 1
}

_run_safe_chars() {
    export LC_ALL="$loc" LC_CTYPE="$loc" LANG="$loc" LANGUAGE="$loc"
    local s="$1"
    local olen="${#s}"

    o=$(str_to_safe_chars "$s" "$2" "$3")
    if [[ $? -ne 0 ]] || [[ -z "$o" ]]; then
        e "Unable to transform str $s"
        return 1
    fi
    nlen="${#o}"
    # ... check str length same
    [[ $olen -ne $nlen ]] && e "orig str: [$olen chars] $s\nnew str: [$nlen chars] $o" && return 1
    echo "$o"
}

### source_files()
t_source_files() {
    SUITE="source_files()"
    run_t t_will_error_if_file_can_not_be_sourced
    run_t t_can_source_multiple_files
}

### check_var_defined
t_check_var_defined() {
    SUITE="check_var_defined()"
    run_t t_non_empty_var_is_success
    run_t t_unset_var_is_error
    run_t t_empty_var_is_error
}

### required_vars()
t_required_vars() {
    SUITE="required_vars()"
    run_t t_success_if_all_vars_defined
    run_t t_error_if_any_vars_missing
}

### str_to_safe_chars()
t_str_to_safe_chars() {
    SUITE="str_to_safe_chars"
    run_t t_default_replacement
    run_t t_replacement_str_too_long
    run_t t_safe_aws_tag
    run_t t_disallowed_chars_no_exclamation
    run_t t_disallowed_chars_with_exclamation
    run_t t_replace_with_utf8_char
    run_t t_replace_utf8_char_with_ascii
}

### export_build_url()
t_export_build_url() {
    SUITE="export_build_url"
    run_t t_build_url_if_circleci
    run_t t_build_url_if_travis
    run_t t_build_url_if_jenkins
}

t_build_url_if_circleci() {
    (
        CIRCLE_BUILD_URL="https://circleci.com/foo/bar/job/123456"
        export_build_url
        [[ $? -eq 0 ]] \
        && [[ $BUILD_URL == $CIRCLE_BUILD_URL ]] \
        && export -p | grep -Po "\bBUILD_URL=\"$CIRCLE_BUILD_URL\"$" >/dev/null # actually exported
    )
}

t_build_url_if_travis() {
    (
        TRAVIS="true" TRAVIS_REPO_SLUG="foo/bar" TRAVIS_JOB_ID="123456"
        export_build_url
        [[ $? -eq 0 ]] && export -p | grep -Po "\bBUILD_URL=.*" >/dev/null # actually exported
    )
}

t_build_url_if_jenkins() {
    (
        local url="https://jenkins.example.com/foo/bar/job/123456"
        BUILD_URL=$url
        export_build_url
        [[ $? -eq 0 ]] && export -p | grep -Po "\bBUILD_URL=\"$BUILD_URL\"" >/dev/null
    )
}

t_default_replacement() {
    local r="" e=""
    e='___________+_-./0123456789:__=__@ABCDEFGHIJKLMNOPQRSTUVWXYZ______abcdefghijklmnopqrstuvwxyz_____@'
    r=$(run_safe_chars_posix "$STR_ASCII") || return 1
    [[ "$r" == "$e" ]]
}

t_replacement_str_too_long() {
    o=$(str_to_safe_chars "some string" "__" 2>&1)
    if [[ $? -ne 0 ]] && echo "$o" | grep 'replacement must be one UTF-8 char' >/dev/null
    then
        return 0
    else
        return 1
    fi
}

t_safe_aws_tag() {
    local r="" e=""
    e=' __________+_-./0123456789:__=__@ABCDEFGHIJKLMNOPQRSTUVWXYZ______abcdefghijklmnopqrstuvwxyz_____@'
    allowed_aws_chars=" $(safe_chars_def_list)"
    r=$(run_safe_chars_posix "$STR_ASCII" "_" "$allowed_aws_chars") || return 1
    [[ "$r" == "$e" ]]
}

t_disallowed_chars_no_exclamation() {
    local r="" e=""
    e='apple____'
    r=$(run_safe_chars_posix 'apple!$*&' '_' '![:punct:][:blank:]') || return 1
    [[ $r == $e ]]
}

t_disallowed_chars_with_exclamation() {
    local r="" e=""
    e='apple__*_'
    r=$(run_safe_chars_posix 'apple !$*&' '_' '!!$&[:blank:]') || return 1
    [[ $r == $e ]]
}

t_replace_with_utf8_char() {
    local r="" e=""
    local _e=$UTF8_ACUTE_E
    e="caf$_e attach$_e mat$_e tr${_e}ma"
    r=$(run_safe_chars_utf8  "$STR_UTF8_FLAT_E" "$UTF8_ACUTE_E" '!e') || return 1
    [[ $r == $e ]]
}

t_replace_utf8_char_with_ascii() {
    # ... replacing acute-accented e with E
    local r="" e=""
    local _e=$UTF8_ACUTE_E
    local test_str="caf$_e attach$_e mat$_e tr${_e}ma"
    local e="cafE attachE matE trEma"
    r=$(run_safe_chars_utf8  "$test_str" "E" "!$UTF8_ACUTE_E") || return 1
    [[ $r == $e ]]
}

### envsubst_tokens_list()
t_envsubst_tokens_list() {
    SUITE="envsubst_tokens_list"
    run_t t_create_list_of_tokens
}

### random_str()
# just make sure function exists - can't easily verify randomness!
t_random_str() {
    SUITE="random_str()"
    run_t t_check_random_str_func_exists
}

### semver_a_ge_b()
t_semver_a_ge_b() {
    SUITE="semver_a_ge_b"
    run_t t_success_if_a_gt_b
    run_t t_success_if_a_eq_b
    run_t t_works_with_leading_v
    run_t t_works_with_leading_V
    run_t t_success_if_greater_prerel
    run_t t_fail_if_prerel
    run_t t_succeed_if_newer_prerel
    run_t t_succeed_if_newer_prerel_build
    run_t t_fail_if_a_lt_b
    run_t t_fail_if_a_not_semver
    run_t t_fail_if_b_not_semver
    run_t t_fail_if_b_is_empty
}

t_success_if_a_gt_b() {
    semver_a_ge_b "1.0.0" "0.1.0" \
    && semver_a_ge_b "11.0.0" "9.15.0"
}

t_success_if_a_eq_b() {
    semver_a_ge_b "1.0.0" "1.0.0"
}

t_works_with_leading_v() {
    semver_a_ge_b "v0.2.0" "V0.2.0"
}

t_works_with_leading_V() {
    semver_a_ge_b "V0.2.0" "v0.2.0"
}

t_success_if_greater_prerel() {
    semver_a_ge_b "0.2.1-alpha" "v0.2.0"
}

t_fail_if_prerel() {
    ! semver_a_ge_b "v0.2.1-alpha" "V0.2.1"
}

t_succeed_if_newer_prerel() {
    semver_a_ge_b "1.2.0-beta" "v1.2.0-alpha"
}

t_succeed_if_newer_prerel_build() {
    semver_a_ge_b "1.2.0-beta.10" "1.2.0-beta.1+1a"
}

t_fail_if_a_lt_b() {
    ! semver_a_ge_b "0.0.1000" "9.0.0"
}

t_fail_if_a_not_semver() {
    semver_a_ge_b "not-semver0.0.1000" "9.0.0" 2>/dev/null
    [[ $? -eq 2 ]]
}

t_fail_if_b_not_semver() {
    semver_a_ge_b "0.0.1" "not-semver-9.0.0" 2>/dev/null
    [[ $? -eq 2 ]]
}

t_fail_if_b_is_empty() {
    semver_a_ge_b "not-semver0.0.1000" "" 2>/dev/null
    [[ $? -eq 2 ]]
}

t_create_list_of_tokens() {
    local tokens="apple banana carrot"
    local expected='${apple} ${banana} ${carrot}'
    [[ "$(envsubst_tokens_list "$tokens")" == "$expected" ]]
}

t_check_random_str_func_exists() {
    declare -f random_str >/dev/null 2>&1
}

t_success_if_all_vars_defined() {
    local my_var1=apple my_var2=banana my_var3=carrot
    required_vars "my_var1 my_var2 my_var3"
}

t_error_if_any_vars_missing() {
    local my_var1=apple my_var2=carrot my_var5="egg-plant"
    ! required_vars "my_var1 my_var2 my_var3 my_var4 my_var5" 2>/dev/null
}

t_non_empty_var_is_success() {
    local my_var="a value"
    check_var_defined my_var
}

t_unset_var_is_error() {
    unset my_var_unset
    ! check_var_defined my_var_unset
}

t_empty_var_is_error() {
    local my_var_empty=""
    ! check_var_defined my_var_empty
}

t_can_source_multiple_files() {
    local rc=0 out=""
    local f="/var/tmp/t_will_error_if_file_can_not_be_sourced"
    echo "echo 'foo'">$f.1
    echo "echo 'bar'">$f.2
    out=$(source_files $f.1 $f.2 2>&1)
    echo $out | grep -Po '^foo bar$' >/dev/null || rc=1
    rm $f.1 $f.2
    return $rc
}

t_will_error_if_file_can_not_be_sourced() {
    local rc=0 out=""
    local f="/var/tmp/t_will_error_if_file_can_not_be_sourced"
    echo "echo 'foo'">$f.1
    echo "echo 'bar'">$f.2
    out=$(source_files $f.1 $f.2 $f.3 2>&1)
    echo "$out" | grep -P "... can not source $f.3" >/dev/null || rc=1
    [[ $out =~ ^foo.bar[^-_a-zA-Z0-9] ]] || rc=1
    rm $f.1 $f.2
    return $rc
}

### Tests for logging functions

### set_log_prefix()
# set_log_prefix() is intended to be called from i(), e(), d() etc
# Hence we need to amend which frame of the call stack to use for these
# tests that do call it directly (by setting FROM_STACKFRAME)
# so we get the EXPECTED_PREFIX or EXPECTED_DEBUG_PREFIX
t_set_log_prefix() {
    SUITE='set_log_prefix()'
    run_t t_prefix_when_run_from_script
    run_t t_prefix_when_run_in_shell
    run_t t_prefix_when_run_from_script_with_debug
    run_t t_prefix_when_run_in_subshell
    run_t t_prefix_when_run_in_sourced_file
}

### d()
t_d() {
    SUITE='d()'
    run_t t_no_output_if_DEBUG_not_set
    run_t t_output_if_debug_set
    run_t t_no_debug_output_if_QUIET
}

### i()
t_i() {
    SUITE='i()'
    run_t t_no_i_output_if_QUIET
}

### __stacktrace()
t___stacktrace() {
    SUITE='__stacktrace'
    local patt="^t___stacktrace\(\) \(file: $0, line: \d+\).n..run_t\(\) \(file: [^,]+, line: \d+\).n"
    local st=$(FROM_STACKFRAME=0 __stacktrace)
    echo "$st" | grep -P "$patt" >/dev/null
}

# DEBUG output contains bash terminal codes for colour ...
t_output_if_debug_set() {
    echo "$(DEBUG=true d 'should print' 2>&1)" \
    | grep -Po "^DEBUG $EXPECTED_DEBUG_PREFIX:.*should print" >/dev/null
}

t_no_debug_output_if_QUIET() {
    [[ "$(QUIET=true DEBUG=true d 'should print nothing' 2>&1)" == "" ]]
}

t_no_i_output_if_QUIET() {
    [[ "$(QUIET=true i 'should print nothing' 2>&1)" == "" ]]
}

t_no_output_if_DEBUG_not_set() {
    [[ "$(unset DEBUG; d 'should not print')" == "" ]]
}

t_prefix_when_run_in_shell() {
    [[ $(bash -c ". $SRC && set_log_prefix") == "bash" ]]
}

t_prefix_when_run_from_script() {
    # Use FROM_STACKFRAME as we would not usually call set_log_prefix directly, but from a wrapper.
    local expected="$EXPECTED_PREFIX:t_prefix_when_run_from_script()"
    [[ "$(FROM_STACKFRAME=0 set_log_prefix)" == "$expected" ]]
}

t_prefix_when_run_from_script_with_debug() {
    # Use FROM_STACKFRAME as we would not usually call set_log_prefix directly, but from a wrapper.
    local expected="$EXPECTED_DEBUG_PREFIX:t_prefix_when_run_from_script_with_debug()"
    [[ "$(DEBUG=true FROM_STACKFRAME=0 set_log_prefix)" == "$expected" ]]
}

t_prefix_when_run_in_subshell() {
    local expected="$EXPECTED_DEBUG_PREFIX:t_prefix_when_run_in_subshell()"
    (
        (
            [[ $(DEBUG=true FROM_STACKFRAME=0 set_log_prefix) == "$expected" ]]
        )
    )
}

t_prefix_when_run_in_sourced_file() {
    local a=""
    (
        # no need to use FROM_STACKFRAME as set_log_prefix called indirectly within a new frame
        # created by anon file descriptor <()
        . <(echo -e 'a=$(DEBUG=true set_log_prefix)')
        [[ "$a" == "$EXPECTED_DEBUG_PREFIX:t_prefix_when_run_in_sourced_file()" ]]
    )
}

! . t/t.functions && echo "ERROR $0: could not source t.functions" && exit 1
source_src_and_deps || exit 1
run $*


# vim: et sr sw=4 ts=4 smartindent syntax=sh:
#
# t/t.functions
#

# $FAILURES:
# ... used to capture failed test names.
FAILURES=""

# $SRC:
# ... relative path to actual lib file to test
#     determined by set_SRC(), called when you source
#     t/t.functions.
SRC=

# tests must be run from within the ./bash dir and the test script
# name should be set using a relative path
set_SRC() {
    if ! command -v realpath >/dev/null 2>&1
    then
        echo "ERROR: you must install GNU tools like realpath" >&2
        echo "ERROR: before using opsgang/libs." >&2
        exit 1
    fi

    if [[ ! $(pwd) =~ /bash$ ]]; then
        echo "ERROR: you must call test script from inside the bash dir" >&2
        exit 1
    fi

    SRC="$(realpath -- $0 | sed -e 's!.\+/bash/t/!!')"
    SRC="$SRC"
    if [[ $? -ne 0 ]]; then
        echo "ERROR: problems determining real path to $0" >&2
        exit 1
    fi

    if [[ ! -r $SRC ]]; then
        echo "ERROR: can not find the lib $SRC for test script $0" >&2
        exit 1
    fi

}

run_t() {
    local func="${1#t_}"
    local pad=""
    local desc="$func"
    local t_func="t_$func"
    local rc=0

    [[ ! -z "$SUITE" ]] && pad="    " && desc="[$SUITE] $func"
    if declare -f $t_func >/dev/null
    then
        echo "INFO $0:$pad running test for: $desc"
        ! $t_func && FAILURES="$FAILURES $t_func" && rc=1
    else
        echo "INFO $0: no tests for $func. Skipping"
    fi
    return $rc
}

funcs_to_test() {
    local src="$1"
    grep -Po '^(function +)?[\w:_]+ *\(\) *{ *$' $src | sed -e 's/\([^ (]\+\).*/\1/'
}

source_src_and_deps() {
    local deps="$*"
    local rc=0 file=""
    for file in $SRC $*; do
        echo "INFO $0: sourcing $file"
        ! . $file && echo "ERROR $0: ... can't source $file" >&2 && rc=1
    done
    return $rc
}

run() {
    local args="$*"
    local _t=""
    if [[ -z "$args" ]]; then
        run_all
    else
        for _t in $* ; do
            run_t ${_t#t_}
        done
    fi

    results
}

run_all() {
    for func in $(funcs_to_test $SRC); do
        run_t $func
        unset SUITE
    done
}

results() {
    if [[ "$FAILURES" =~ ^[\ ]*$ ]]; then
        echo "INFO: ALL TESTS SUCCESSFUL"
        return 0
    else
        echo "ERROR: FAILURES: $FAILURES"
        return 1
    fi
}

set_SRC || return 1

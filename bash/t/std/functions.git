#!/bin/bash
# vim: et sr sw=4 ts=4 smartindent syntax=sh:
# TESTS git

T_REPO=https://github.com/opsgang/libs
L_REPO=/var/tmp/repo.src
L_NONREPO=/var/tmp/not-a-git-repo
_USER="boo"
_EMAIL="boo@boo.com"
HEAD_SHA="set-in-setup()"
SECOND_SHA="set-in-setup()"

setup() {
    i "... setting up for tests"
    if [[ -z "$TESTS_DEVMODE" ]]; then
        rm -rf $L_REPO $L_NONREPO 2>/dev/null
        ! mkdir $L_NONREPO && red_e "... failed creating $L_NONREPO" && return 1
        git clone --depth 5 --branch master $T_REPO $L_REPO || return 1
    fi
    local d=$(pwd)
    cd $L_REPO
    git reset --hard >/dev/null
    HEAD_SHA=$(git log --format='%H' | head -n 1)
    SECOND_SHA=$(git log --format='%H' | head -n 2 | tail -n 1)
    cd $d
}

repo_for_test() {
    local repo="$1"
    rm -rf $repo; cp -R $L_REPO $repo; sleep 0.5
    (
        cd $repo
        git reset --hard >/dev/null
        git config user.name $_USER
        git config user.email $_EMAIL
    )
}

# ... use this for tests that want a repo where the head commit is
# definitely not tagged.
new_commit() {
    echo new_commit >>README.md
    git checkout master
    git commit -am 'fake; will not push'
}

new_tag() {
    git --no-pager tag -a 'new-tag' -m 'bah'
}

new_branch() {
    git checkout -b new-branch >/dev/null 2>&1
}

checkout_tag() {
    git checkout new-tag >/dev/null 2>&1
}

### git_branch()
t_git_branch() {
    SUITE="git_branch()"
    run_t error_if_not_a_git_dir
    run_t if_head_commit_tagged_still_show_branch
    run_t if_checkout_tag_show_from_a_tag
}

t_error_if_not_a_git_dir() {
    local rc=0
    local o=""
    (
        cd $L_NONREPO
        o=$(git_branch 2>&1)
        [[ $? -ne 0 ]] || exit 1 # should fail as not a git repo
        echo "$o" | grep 'not in a git repo' >/dev/null || exit 1
    ) || rc=1

    return $rc
}

t_if_head_commit_tagged_still_show_branch() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        ! new_branch >/dev/null 2>&1 && e "could not create new branch" && exit 1
        ! new_tag >/dev/null 2>&1 && e "could not create new tag" && exit 1
        git_branch | grep -Po '^new-branch$' >/dev/null
    ) || rc=1

    rm -rf $repo
    return $rc
}

t_if_checkout_tag_show_from_a_tag() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        ! new_tag >/dev/null 2>&1 && e "could not create new tag" && exit 1
        ! new_branch >/dev/null 2>&1 && e "could not create new branch" && exit 1
        ! new_commit >/dev/null 2>&1 && e "could not create new commit" && exit 1
        ! checkout_tag >/dev/null 2>&1 && e "couldn't checkout to tag" && exit 1
        git_branch | grep -Po '^$' >/dev/null
    ) || rc=1

    rm -rf $repo
    return $rc
}

### git_vars()
t_git_vars() {
    SUITE="git_vars()"
    run_t git_vars_on_master
    run_t git_vars_checked_out_branch_with_tag
    run_t git_vars_checked_out_detached_head_tag
}
### git_info_str()
t_git_info_str() {
    SUITE="git_info_str()"
}

### in_git_clone()
t_is_git_clone() {
    SUITE="is_git_clone()"
    run_t success_if_git_cloned
    run_t default_check_pwd_is_clone_if_no_arg
    run_t error_if_git_clone_dir_not_exist
}

### check_for_changes
t_check_for_changes() {
    SUITE="check_for_changes()"
    run_t success_if_no_local_changes
    run_t skip_check_if_devmode
    run_t error_if_existing_file_changed
    run_t no_error_if_file_added
    run_t error_checking_if_not_a_git_dir
}

### sha_in_origin
t_sha_in_origin() {
    SUITE="sha_in_origin()"
    run_t success_if_commit_in_origin
    run_t use_GIT_SHA_if_no_arg
    run_t use_current_sha_if_no_arg_or_GIT_SHA
}

t_git_vars_on_master() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    local u="$_USER" e="$_EMAIL"
    local git_info="repo:$T_REPO sha1:\w{$GIT_SHA_LEN} tag:-no tag- branch:master"
    local patt="^<master><$T_REPO><\w{$GIT_SHA_LEN}><><$u><$e><$u $e><$git_info>$" # tag is empty
    repo_for_test $repo

    (
        cd $repo
        ! new_commit >/dev/null 2>&1 && e "could not create new commit" && exit 1

        git_vars

        str="<$GIT_BRANCH><$GIT_REPO><$GIT_SHA><$GIT_TAG><$GIT_USER><$GIT_EMAIL><$GIT_ID><$GIT_INFO>"
        echo "$str" | grep -P "$patt" >/dev/null
    ) || rc=1

    rm -rf $repo
    return $rc
}

# $GIT_BRANCH and GIT_TAG should both have values when
# checked-out branch's current commit is tagged.
t_git_vars_checked_out_branch_with_tag() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        ! new_commit >/dev/null 2>&1 && e "could not create new commit" && exit 1
        ! new_tag >/dev/null 2>&1 && e "could not create new tag" && exit 1

        git_vars
        [[ "<$GIT_BRANCH><$GIT_TAG>" == "<master><new-tag>" ]] || exit 1

    ) || rc=1

    rm -rf $repo
    return $rc
}

# $GIT_BRANCH should be empty when on a detached head
t_git_vars_checked_out_detached_head_tag() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    local u="$_USER" e="$_EMAIL"
    local git_info="repo:$T_REPO sha1:\w{$GIT_SHA_LEN} tag:new-tag branch:-no branch-"
    local patt="^<><$T_REPO><\w{$GIT_SHA_LEN}><new-tag><$u><$e><$u $e><$git_info>$"
    repo_for_test $repo

    (
        cd $repo
        ! new_tag >/dev/null 2>&1 && e "could not create new tag" && exit 1
        ! new_commit >/dev/null 2>&1 && e "could not create new commit" && exit 1
        git checkout new-tag >/dev/null 2>&1
        git_vars ;
        str="<><$GIT_REPO><$GIT_SHA><$GIT_TAG><$GIT_USER><$GIT_EMAIL><$GIT_ID><$GIT_INFO>"
        echo "$str" | grep -P "$patt" >/dev/null
    ) || rc=1

    rm -rf $repo
    return $rc
}

t_GIT_INFO_is_sanitised() {
    local exp='repo:https://user:pword@blah:8080/ sha1:____________>-+=<____ tag:1.3.9 branch:foo'

    (
        GIT_REPO="https://user:pword@blah:8080/"
        GIT_SHA='!"Â£$%^&*()_>-+=<`\\|'
        GIT_TAG=1.3.9
        GIT_BRANCH=foo
        GIT_INFO=$(git_info_str)
        [[ "$GIT_INFO" == "$exp" ]] || exit 1
    )
}

t_success_if_git_cloned() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo
    is_git_clone $repo/bash || rc=1
    rm -rf $repo
    return $rc
}

t_error_if_git_clone_dir_not_exist() {
    is_git_clone /foo/bar 2>&1 | grep "couldn't cd to /foo/bar" >/dev/null
}

t_default_check_pwd_is_clone_if_no_arg() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        is_git_clone || exit 1
    ) || rc=1

    rm -rf $repo
    return $rc
}

t_skip_origin_check_if_devmode() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        lrc=0
        cd $repo
        local o=$(DEVMODE=true sha_in_origin 2>&1) || lrc=1
        echo "$o" | grep -P 'DEVMODE.* - skipping' >/dev/null || lrc=1
        exit $lrc
    ) || rc=1

    rm -rf $repo
    return $rc
}

t_use_current_sha_if_no_arg_or_GIT_SHA() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        local o=$(sha_in_origin)
        echo "$o" \
        | grep -P "checking git sha ${HEAD_SHA:0:$GIT_SHA_LEN} exists in origin" >/dev/null \
        || exit 1

    ) || rc=1

    rm -rf $repo
    return $rc
}

t_success_if_commit_in_origin() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        sha_in_origin $SECOND_SHA >/dev/null || exit 1
    ) ||  rc=1

    rm -rf $repo
    return $rc
}

t_use_GIT_SHA_if_no_arg() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    (
        cd $repo
        local o=$(GIT_SHA="blahblahblah" sha_in_origin 2>&1)
        echo "$o" | grep -P 'commit \(blahblahblah\) does not exist on origin\.' >/dev/null || exit 1
    ) || rc=1

    rm -rf $repo
    return $rc
}

t_success_if_no_local_changes() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    check_for_changes $repo >/dev/null || rc=1

    rm -rf $repo
    return $rc
}

t_skip_check_if_devmode() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo

    local o=$(DEVMODE=true check_for_changes $repo 2>&1) || rc=1
    echo "$o" | grep -P 'DEVMODE.* - skipping' >/dev/null || rc=1

    rm -rf $repo
    return $rc
}

t_error_if_existing_file_changed() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo
    echo "Deliberately changing file for test" >$repo/README.md

    ! check_for_changes $repo >/dev/null 2>&1 || rc=1

    rm -rf $repo
    return $rc
}

t_no_error_if_file_added() {
    local rc=0
    local repo=/var/tmp/repo_${FUNCNAME[0]}
    repo_for_test $repo
    echo "Deliberately adding file for test" >$repo/this-file-is-new

    check_for_changes $repo >/dev/null || rc=1

    rm -rf $repo
    return $rc
}

t_error_checking_if_not_a_git_dir() {
    local o=""
    o=$(check_for_changes $L_NONREPO 2>&1)
    [[ $? -ne 0 ]] || return 1 # check_for_changes should have returned fail
    echo "$o" | grep "is not a git dir" >/dev/null || return 1
    return 0
}

! . t/functions.t && echo "ERROR $0: could not source functions.t" && exit 1
source_src_and_deps "std/functions std/functions.log_msgs" || exit 1
setup || exit 1

run $*


# vim: et sr sw=4 ts=4 smartindent syntax=sh:
# ... must source std/functions and std/functions.git first

# Globals ...

# ... path to terraform binary - set this in env or make sure it is in your PATH
TERRAFORM="${TERRAFORM:-}"

# ... any opts to pass `init` (or `remote config` if tf <=v0.8.8 ) on [terraform_init](#terraform_init)
TERRAFORM_INIT_OPTS="${TERRAFORM_INIT_OPTS:-}"

# ... any opts to pass `apply` on [terraform_apply](#terraform_apply)
TERRAFORM_APPLY_OPTS="${TERRAFORM_APPLY_OPTS:-}"

# ... with old tf (<=v0.8.8) any opts to pass `terraform get` on [terraform_init](#terraform_init)
TERRAFORM_GET_OPTS="${TERRAFORM_GET_OPTS:-}"

# ... set to non-empty to keep downloaded terraform modules.
KEEP_PLUGINS="${KEEP_PLUGINS:-}"

# ... set to non-empty value to skip git checks and `terraform apply`
DEVMODE="${DEVMODE:-}"

__run_if_exists() {
    local f="$1"
    if declare -f $f >/dev/null 2>&1
    then
        d "... running $f function" >&2
        ! $f && e "... failed." &&  return 1
    fi
    return 0
}

__show_env() {
    [[ -z "$DEVMODE" ]] && return 0

    yellow_i "================================================="
    yellow_i "= EXPORTED VARS:"
    yellow_i "================================================="
    yellow_i "$(export)"
    yellow_i "================================================="
}

# @desc Returns the path to the terraform binary.
#
# Optionally, user can set $TERRAFORM in env, to force the use of a particular binary.
#
tf() {
    [[ -z "$TERRAFORM" ]] && TERRAFORM=$(which terraform 2>/dev/null)
    if [[ -z "$TERRAFORM" ]]; then
        red_e "... can not locate terraform. Set \$TERRAFORM in env if you know the path"
        return 1
    fi
    echo "$TERRAFORM"
}

# @desc Runs terraform --version.
#
# Used internally to pick which terraform subcommands to run.
#
# Affected by global [$TERRAFORM](#globals).
#
terraform_version() {
    local tv=""
    $TERRAFORM --version | grep -Po '(?<=Terraform v)[\d\.]+'
    if [[ $? -ne 0 ]] || [[ -z "$tv" ]]; then
        red_e "... could not determine version: used $TERRAFORM --version"
        return 1
    fi
}

__special_modes() {
    _disclaimer_devmode
    _disclaimer_keep_plugins
}

_disclaimer_devmode() {
    local v='DEVMODE'
    if [[ ! -z "${!v}" ]] ; then
        yellow_i "================================================="
        yellow_i "= ACTIVATED: \$${v}"
        yellow_i "================================================="
        bold_i   "... will print additional info to stdout"
        bold_i   "... ignoring uncommitted or unpushed git changes"
        bold_i   "... not going to terraform-apply"
        yellow_i "================================================="
    fi
}

_disclaimer_keep_plugins() {
    local v='KEEP_PLUGINS'
    if [[ ! -z "${!v}" ]] ; then
        yellow_i "================================================="
        yellow_i "= ACTIVATED: \$${v}"
        yellow_i "================================================="
        bold_i   "... will not delete previously downloaded"
        bold_i   "    terraform plugins."
        yellow_i "================================================="
    fi
}

# @desc Deletes any terraform cache or downloaded state files from the local workspace.
#
# **Do not use this if you are not using a remote state backend.**
#
# Used to ensure a clean terraform run.
#
# If you are using terraform 0.10.0+, you can set $KEEP_PLUGINS to non-empty
# and any downloaded plugins will not be deleted (to save some run time).
#
terraform_cleanup() {
    i "... cleaning up caches, state files"
    rm -rf ~/.terraform.d 2>/dev/null
    find . -type f \( -name '*.tfstate' -o -name '*.tfstate.backup' \) -exec rm {} \;
    if [[ -z "$KEEP_PLUGINS" ]]; then
        rm -rf .terraform
    else
        yellow_i "KEEP_PLUGINS set - will not delete existing plugins."
        find .terraform -path .terraform/plugins -prune -o -type f -print -exec rm {} \;
    fi
    return 0
}

# @desc Will run terraform subcommands to initialise / fetch remote state, any modules and plugins.
# 
# Some [globals](#globals) - $TERRAFORM, $TERRAFORM_INIT_OPTS, TERRAFORM_GET_OPTS - affect behaviour.
# 
terraform_init() {
    local init_opts="$TERRAFORM_INIT_OPTS" # init / remote config opts
    local get_opts="$TERRAFORM_GET_OPTS"
    local tv=$(terraform_version) ; [[ -z "$tv" ]] && e "version of terrform not found" && return 1

    # ... for terraform 0.9.0+
    local init_cmd="init" get_cmd=""

    i "... initialising terraform"

    # ... for terraform <0.9.0
    if ! semver_a_ge_b "$(terraform_version)" "0.9.0"
    then
        init_cmd="remote config"
        get_cmd="get" # need to get modules first.
    fi

    if [[ ! -z "$DEVMODE" ]]; then
        if [[ ! -z "$get_cmd" ]]; then
            yellow_i "================================================="
            yellow_i "... will run '$get_cmd' to fetch any modules"
        fi
        if [[ ! -z "$init_opts" ]]; then
            yellow_i "================================================="
            yellow_i "= terraform $init_cmd opts:"
            yellow_i "================================================="
            yellow_i "$init_opts"
            yellow_i "================================================="
        fi
    fi

    # ... run terraform get if needed
    [[ ! -z $get_cmd ]] && ! eval "$TERRAFORM get $TERRAFORM_GET_OPTS" && return 1
    # ... now run init
    eval "$TERRAFORM $init_cmd $init_opts"
}

# @desc Runs `terraform apply` - for v0.11.0+, will add the -auto-approve to run it non-interactively.
#
# Some [globals](#globals) - $TERRAFORM, $TERRAFORM_APPLY_OPTS, $DEVMODE - affect behaviour.
#
# Set $TERRAFORM_APPLY_OPTS to pass `apply` any other options.
#
# When $DEVMODE is set, `apply` is not actually run.
#
terraform_apply() {
    i "... applying terraform"
    local opts="$TERRAFORM_APPLY_OPTS" # opts to pass apply subcmd

    # ... for terraform 0.11.0 or later
    semver_a_ge_b "$(terraform_version)" "0.11.0" && opts="$opts -auto-approve"

    if [[ -n "$DEVMODE" ]] && [[ -n "$opts" ]]; then
        yellow_i "================================================="
        yellow_i "= terraform apply opts:"
        yellow_i "================================================="
        yellow_i "$opts"
        yellow_i "================================================="
    fi
    [[ ! -z "$DEVMODE" ]] && yellow_i "DEVMODE - skipping terraform apply" && return 0
    eval "$TERRAFORM apply $opts"
}

# @desc Wrapper cmd to perform terraform subcommands for `init` (or `remote cfg`/`get`), `plan`, `apply`.
#
# Will use `remote cfg` and `get` instead of `init` for older terraform versions.
#
# Will run `apply -auto-approve` for newer versions of terraform.
#
# See [terraform_init](#terraform_init) and [terraform_apply](#terraform_apply).
#
# User can define own functions that will run before and after `init`
# and before and after `apply`. (See [lifecycle hooks](#lifecycle-hooks))
#
# #### DEVMODE
#
# _Used to test your terraform **with out modifying any real infrastructure**_.
#
# See the caveat when you are writing your own lifecycle hooks.
#
# `terraform apply` will not run if $DEVMODE is set in env.
#
# Additionally, unless DEVMODE is set in env, `apply` will only run if
# the git commit being run exists in the **origin** repo.
#
# This is to prevent users changing infrastructure but not pushing their
# changes, and also to ensure that the git audit info is accurate.
#
# #### lifecycle_* hooks
#
# **CAVEAT** - if you are using any hooks to modify your actual infrastructure, make sure to
# make them no-op if $DEVMODE is set in the env.
#
# * `terraform_preinit`:
#    after [terraform\_cleanup](#terraform_cleanup) but before [terraform\_init](#terraform_init).
#
#    Use this to set any TF_VAR_ variables in your env, or preprocess files.
#
# * `terraform_postinit`:
#    after [terraform\_init](#terraform_init) but before `terraform plan`.
#
#    Use this to post-process any fetched modules or sanity check your env.
#
# * `terraform_preapply`
#    after checking the git commit exists in the origin, but before [terraform\_apply](#terraform_apply).
#
# * `terraform_postapply`
#    after [terraform\_apply](#terraform_apply).
#
#    Use this to perform any other non-terraform-related operations to complete your provisioning.
#
# @example
#
#       # example: preinit func used to get and set all terraform vars
#       terraform_preinit() {
#           export TF_VAR_host_size="humungous"
#           export TF_VAR_secret="$(get_secret)"
#       
#           required_vars "TF_VAR_host_size TF_VAR_secret" || return 1
#       }
#       
#       terraform_run "/my/tf/dir" || exit 1 # will use $TF_VAR* on `plan` and `apply`
#
#
#       # example: postapply func used to switch dns to route traffic from 'blue' to 'green' stack
#       terraform_postapply() {
#           [[ -n "$DEVMODE" ]] && i "DEVMODE, so no-op." && return 0
#           stack=$(which_stack_is_not_live)
#           set_dns "live-$stack.example.com" || return 1
#       }
#
#       terraform_run "/my/tf/dir" || exit 1 # unless DEVMODE, will apply terraform and switch dns.
#       
terraform_run() {
    local wd="$1" tf=""

    __special_modes

    tf=$(tf) || return 1
    i "... using $tf"

    (
        if [[ "$wd" ]]; then
            i "... changing to working dir $wd"
            ! cd $wd && red_e "... could not change to $wd" && exit 1
        fi

        terraform_cleanup || exit 1

        __run_if_exists terraform_preinit  || exit 1

        terraform_init || exit 1

        __run_if_exists terraform_postinit  || exit 1

        __show_env # if DEVMODE, will print out exported vars.

        $TERRAFORM plan || exit 1

        no_unpushed_changes || exit 1

        __run_if_exists terraform_preapply  || exit 1

        terraform_apply || exit 1

        __run_if_exists terraform_postapply  || exit 1

    ) || return 1

    return 0
}


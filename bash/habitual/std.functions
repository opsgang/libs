#!/usr/bin/env bash
# vim: et sr sw=4 ts=4 smartindent syntax=sh:

# @overview
# >
# > Functions used frequently, including stdout/stderr log msgs
# >

#####################################################################
# @section MISC. FUNCTIONS
#####################################################################

# @desc Sources a list of files in to your current bash env.
#
# > User can set `$IGNORE_MISSING` to skip files that do not exist.
# >
# > However an existing file that is unreadable (due to file perms)
# > or contains bad syntax will still raise an error.
#
# *CAVEAT*: *quote each file arg separately*
#
# @example
#   source_files "./foo /bar/foo ../foo"
#   # or ...
#   source_files "./foo" "/bar/spaces in name/foo"
#
#   # ... ignore files that don't exist
#   IGNORE_MISSING=true source_files "default.cfg" "env.cfg" "project.cfg"
#
source_files() {
    local files=("$@")
    local f="" rc=0

    for f in "${files[@]}"; do
        if [[ -e "$f" ]]; then
            d "... sourcing $f"
            #shellcheck disable=SC1090
            ! . "$f" && e "... can not source $f" && rc=1
        else
            if [[ -z "$IGNORE_MISSING" ]]; then
                e "... $f does not exist. Can not source." && rc=1
            else
                d "... $f does not exist, skipping as \$IGNORE_MISSING set"
            fi
        fi
    done

    return $rc
}

# @desc Run function if it exists.
#
# Pass name of function (and then optionally any params for function)
#
# Executes function *IF it exists*.
#
# Success if function executes correctly or does not exist.
#
# @example
#   # ... run my_func() if exists, with args 'apple', 'banana'
#   std::run_if_exists "my_func" apple banana
#
#   # ... run my_func() if exists, with arg containing spaces
#   std::run_if_exists "my_func" "This whole sentence is arg1."
#
std::run_if_exists() {
    local f="$1"
    [[ -z "$f" ]] && red_e "... expects function name as 1st arg." && return 1

    if declare -f "$f" >/dev/null 2>&1
    then
        d "... running '$f' function" && $f "${@:2}"
        return $?
    else
        d "... function '$f()' not found"
        return 0
    fi
}

# @desc Checks a list of vars for undefined
# or empty vals.
#
# **Whitespace or _0_ is not considered empty.**
#
# Returns 1 if any are undefined or empty.
#
# @example
#   # ... test to see $FOO and $BAR are non-empty.
#   required_vars "FOO BAR" || exit 1
#
required_vars() {
    local rc=0
    local required_vars="$1"
    local this_var=""
    for this_var in $required_vars; do
        if ! check_var_defined "$this_var"
        then
            failed="${failed}\$$this_var "
            rc=1
        fi
    done
    [[ $rc -ne 0 ]] && e "following vars must be set in env:\n$failed"
    return $rc
}

# @desc Checks if a var has an empty value.
#
# **Whitespace or _0_ is not considered empty.**
#
# Returns 1 if undefined / empty.
#
# @example
#   # ... test to see $FOO and $BAR are non-empty.
#   check_var_defined "FOO" || echo "FOO is empty or not defined"
#
check_var_defined() { [[ -n "${!1}" ]] ; }

# @desc Trim leading and trailing whitespace from a string
#
# @example
#   std::trim_str " <- spaces disappear! ->  "
#   # ^^^ outputs "<- spaces disappear! ->"
#
std::trim_str() {
    local v="$*"
    # ... remove leading
    v="${v#"${v%%[![:space:]]*}"}"
    # ... remove trailing
    v="${v%"${v##*[![:space:]]}"}"
    echo -n "$v"
}

# @desc Replaces bash vars (and optionally executes bash code) in a template file.
#
# An empty var value will render as nothing in the tmpl.
# You can literal dollars with a backslash.
#
# The path to the template file can be passed as an argument,
# or set as the value to $file_tmpl before calling the function.
#
# By default, any $() or backticks in the tmpl will be escaped
# unless already preceded with backslash. Multiple backslashes before a $( or backtick
# are collapsed to a single backslash. No sneaky executing bash that way I'm afraid.
#
# If you really want to let code execute in the tmpl when you call this function,
# pass "true" as 2nd param, or set allow_code=true before calling function.
# But remember that if you are not in control of template content, this is a security
# risk - $(rm -rf *.* anyone???)
#
# > *IMPORTANT - MULTIPLE TRAILING NEWLINES IN TMPL:*
# > If these must be preserved, don't use this function.
# > In fact, reconsider using bash at all.
# > There are many contexts where bash will swallow trailing newlines
# > e.g. when reading with command expansion, subshells, inline file handles
#
# @example
#   # /path/to/tmpl contains: I eat $number ${fruit}s.
#   
#   fruit=apple number=2 std::render_tmpl "/path/to/tmpl"
#   # ^^^ outputs "I eat 2 apples"
#   
#   file_tmpl="/path/to/tmpl"
#   fruit=banana number=3 std::render_tmpl # no param needed as file_tmpl set
#   # ^^^ outputs "I eat 3 bananas"
#   
#   # allow code to execute.
#   # /path/to/tmpl2 contains : I say $(echo Howdy Pardner!!! )
#   allow_code=true std::render_tmpl "/path/to/tmpl2"
#   # ^^^ outputs "I say Howdy Pardner!!! "
#
std::render_tmpl() {
    local file_tmpl="${1:-$file_tmpl}"
    local allow_code="${2:-$allow_code}" # default is to not execute code on render.
    required_vars "file_tmpl" || return 1
    [[ ! -r "$file_tmpl" ]] && e "$file_tmpl is not readable" && return 1

    local d="" delim="__render_tmpl__" cmd=""

    d=$(< "$file_tmpl")

    if [[ ! "$allow_code" =~ ^(allow|true|y|yes|1)$ ]]; then
        d="$(_stop_breakouts_in_render "$d")"
    fi

    cmd="cat <<$delim"$'\n'"$d"$'\n'"$delim" # creates a heredoc

    # ... check eval worked syntactically ...
    if ! eval "$cmd"
    then
        e "... failed to render file $file_tmpl"
        return 1
    fi

    return 0
}

_stop_breakouts_in_render() {
    local d="$1"
    #shellcheck disable=SC2016
    echo "$d" \
    | sed \
        -e 's/\([^\\]\)`/\1\\`/g' `# catch backticks preceded by non-backslash` \
        -e 's/^`/\\`/g' `# catch backticks at start of line` \
        -e 's/\([^\\]\)\$(/\1\\\$(/g' `# $( preceded by non-backslash` \
        -e 's/^\$(/\\\$(/g' `# $( at start of line` \
        -e 's/\\\+\([`\$]\)/\\\1/g' `# reduce n backslashes to 1 before $( or backtick`
}

# @desc Prints a user-passed *single-line* str with all instances of certain chars
# replaced by a safe character.
#
# *See examples  if you are working with UTF-8 wide-byte chars*
#
# Useful for creating vals that can be consumed by systemd environment AND sourced by a shell script
# both of which treat quotes, whitespace and `$` signs differently.
#
# Or to create valid AWS tag values (there is a limited set of valid chars)
#
# * Arg 1: *single-line* str to transform
#
# * Arg 2: Optional: the replacement char, defaults to `_`
#
# > To use `]` and/or `[` in Arg 2, they must appear at start of pattern in that order
# > (after any leading `!` if you want to specify a disallowed list)
# >
# > To use `-` in Arg2, it MUST appear as the last char.
# > You can use named POSIX character classes e.g. [:blank:] or [:alnum:].
#
# * Arg 3: Optional: the list of chars to keep (*or replace if prefixed with* `!`)
#
# > To include a literal `!` in a list to replace, add another exclamation mark.
# >
# > The default is strict, replacing all but alphanumerics and these chars:`_.:/=+-@`
#
# Call [safe_chars_def_list](#safe_chars_def_list) to get the default char list.
#
# @example
#   # ... default
#   #
#   str_to_safe_chars 'from_repo:"git@github.com/me/foo"'
#       # output: from_repo:_git@github.com/me/foo_
#
#   # ... handling UTF-8 (e.g using copyright char as replacement)
#   # Ensure your shell's locale is set up for utf8 first ... e.g.
#   loc=en_US.UTF-8 ; export LC_ALL="$loc" LC_CTYPE="$loc" LANG="$loc" LANGUAGE="$loc"
#   str_to_safe_chars "-C-" "$(printf '\xC2\xA9')" '!C' # replace C with copyright symbol
#
#   # ... for safe AWS tag (transform same chars as default, but whitespace is fine)
#   #
#   str_to_safe_chars "from repo: <git@github.com/me/foo>" '_' "$(safe_chars_def_list)[:blank:]"
#       # output: from repo:_git@github.com/me/foo_
#
#   # ... for val in systemd env file that can also be sourced by shell script
#   #
#   # so no backslash, `$`, backtick, whitespace,`"`, or `'`.
#   #
#   bad_chars='!\$`[:blank:]"'"'" # Note leading ! indicates list is of chars to replace
#   str_to_safe_chars 'price (in $USD):"5.00"' '-' "$bad_chars"
#       # output: price-(in--USD):-5.00-
#
#   # ... strip all non-alphanumerics except hyphens and underscores
#   #
#   str_to_safe_chars "from repo: <git@github.com/me/foo>" '_' '[:alnum:]_-'
#       # output: from_repo__git_github_com_me_foo_
#
#
str_to_safe_chars() {
    local s="$1" # str to transform
    local r="${2:-_}" # replacement char
    local p="${3:-$(safe_chars_def_list)}" # allowed chars (or with leading ! disallowed)
    local sed_cmd=""

    [[ -z "$1" ]] && red_e "... you must pass a str to transform" && return 1
    [[ "${#r}" -ne 1 ]] && red_e "... replacement must be one UTF-8 char, not '$r'" && return 1

    local sed_class="[^$p]"
    # if user passed a list of disallowed chars
    if [[ "${p:0:1}" == "!" ]]; then
        sed_class="[${p:1:${#p}}]"
    fi

    # GNU tr does not handle UTF8 correctly, so sed is used instead
    # ... user may pass '/' to $r which would mess with default sed delimiter.
    if [[ "$r" == '/' ]]; then
        sed_cmd="echo '$s' | sed -e 's#$sed_class#$r#g'"
    else
        sed_cmd="echo '$s' | sed -e 's/$sed_class/$r/g'"
    fi

    if ! eval "$sed_cmd"; then
        e "... unable to make safe\nstr: $s\nreplacement char: $r\nchar list: $p\ncl:$sed_class"
        return 1
    fi
    return 0
}

# @desc Prints default list of allowed chars for
# [str_to_safe_chars()](#str_to_safe_chars)
safe_chars_def_list() {
    echo '[:alnum:]:_.=+@/-'
}

# @desc produces the SHELL-FORMAT arg suitable for
# the `envsubst` cmd, from a list of var names.
#
# This is useful to tell envsubst not to replace shell vars
# in a template str or file unless they are listed in the
# SHELL-FORMAT.
#
# `man envsubst` for more info (part of _GNU gettext_ utils)
#
# @example
#   # ... produces "${FOO} ${BAR}"
#   str=envsubst_tokens_list "FOO BAR"
#
envsubst_tokens_list() {
    local tmpl_tokens="$1"
    local list=""
    for token in $tmpl_tokens; do
        token="\${$token}"
        if [[ -z "$list" ]]; then
            list="$token"
        else
            list="$list $token"
        fi
    done
    echo "$list"
}

# @desc creates random str of format <datetime>-<integer>-<integer>
# Useful for docker container names (or suffixes) to "guarantee" uniqueness.
#
random_str() {
    date +"%Y%m%d%H%m%s-$(( $(shuf -i 1-999999 -n1) * $(shuf -i 1-999999 -n1) ))"
}

# @desc compares 2 semver strs and returns success if arg1 is >= arg2.
#
# Any leading 'v' is stripped before comparison.
# Works with prerelease and metadata info.
#
# _Returns 2 on arg err_
#
# @example
#   semver_a_ge_b 0.100.10 0.10.10 # true (as v 0.100 is greater than v0.10)
#
#   semver_a_ge_b 0.99.0 0.99.0    # true (as args are the same)
#
#   semver_a_ge_b v0.99.0 0.99.0   # true (as args are the same, ignoring the leading v)
#
#   semver_a_ge_b 0.99.0-beta V0.99.0-alpha # true (as beta beats alpha)
#
semver_a_ge_b() {
    local a="$1"
    local b="$2"
    local va="${1##[vV]}" ; va="${va%%-*}" # strip leading v and any prerelease info etc
    local vb="${2##[vV]}" ; vb="${vb%%-*}" # strip leading v and any prerelease info etc

    local p='^[vV]?[0-9]+\.[0-9]+\.[0-9]+(-.+)?$'
    ! [[ "$a" =~ $p ]] && e "... expects 2 semver strs as params" && return 2
    ! [[ "$b" =~ $p ]] && e "... expects 2 semver strs as params" && return 2

    # prerelease versions have a lower precedence than normal
    # so if x.y.z are same for each, but one is a prerelease, it is less.
    # if x.y.z are same but both are prereleases, normal comparison.
    if [[ "$va" == "$vb" ]] && [[ "$a$b" =~ \- ]]; then

        if [[ "$a" =~ \- ]] && [[ "$b" =~ \- ]]; then

            # ... both are prerelease, just compare originals with out leading vVs
            _semver_a_gt_b "${a##[vV]}" "${b##[vV]}"
            return $?

        elif [[ "$a" =~ \- ]] ; then
            return 1
        else
            return 0
        fi
    fi

    _semver_a_gt_b "$va" "$vb"

}

_semver_a_gt_b() {
    local a=$1
    local b=$2
    [[ "$a" == "$b" ]] || [[ $(echo -e "$a\n$b" | sort -V | head -n 1) != "$a" ]]
}

# @desc Exports $BUILD_URL if available from a number of possible sources.
#
# $BUILD_URL is a link to a CI/CD job's run.
#
# Returns 1 if BUILD_URL can not be determined.
#
# Use this to annotate your builds and deployments with governance metadata. e.g. the job run
# should show you who built what when.
#
# [shippable](https://shippable.com), [circleci](https://circleci.com) and [jenkins](https://jenkins.io)
# provide an equivalent var. This func just exports it with a standard name.
#
# TravisCI [does not](https://github.com/travis-ci/travis-ci/issues/8935), but it is
# possible to construct it.
#
export_build_url() {
    if [[ -n "$CIRCLE_BUILD_URL" ]]; then
        BUILD_URL="$CIRCLE_BUILD_URL"
    elif [[ "$TRAVIS" == "true" ]]; then
        if required_vars "TRAVIS_REPO_SLUG TRAVIS_JOB_ID"
        then
            BUILD_URL="https://travis-ci.org/$TRAVIS_REPO_SLUG/jobs/$TRAVIS_JOB_ID"
        fi
    fi
    [[ -n "$BUILD_URL" ]] && export BUILD_URL
}

#####################################################################
# @section LOG MESSAGE FUNCTIONS
#####################################################################

###################################
# GETTING THE CORRECT LOG PREFIX
###################################
#
# $FROM_STACKFRAME: use to adjust index of the call stack is used for the log prefix
#
# The default value of 1 will work for most things.
#
# However in an anon file descriptor for example
#   . <(echo ". functions ; i 'fd means new frame'") # will not set the correct log prefix
#
# The anon file descriptor creates a new frame in the stack:
#   . <(echo ". functions ; FROM_STACKFRAME=2 i 'fd means new frame'") # will set the prefix
#

# TERMINAL

__TBOLD="\033[1;37m"
__TDEBUG="\033[46;1;37m"
__TRED="\033[1;31m"
__TGREEN="\033[1;32m"
__TYELLOW="\033[1;33m"
__TBLUE="\033[1;34m"
__TRESET="\033[0m"

__CALLER_REGX="^([^ ]+) ([^ ]+) (.+)$"

# ... set in env to non-empty value to print debug messages to STDERR (See [d()](#d))
DEBUG=${DEBUG:-}

# ... set in env to use abs paths to source files in any messages. (See [d()](#d))
DEBUG_ABS_PATHS=${DEBUG_ABS_PATHS:-}

# ... set in env to non-empty value to silence all messages apart from errors
QUIET=${QUIET:-}

# if running via bash or sh, use that as prefix,
# or
# if running via script, print executed or sourced
# file that called the logging function
#
# In DEBUG, prints full path to source files
set_log_prefix() {
    if [[ $0 =~ ^-?(ba)?sh$ ]]; then
        echo "${0#-}"
    else
        local src="" f="" func=""
        # I don't think the one below is correct but suspect it's a bug
        #shellcheck disable=SC2086
        if [[ "$(caller ${FROM_STACKFRAME:-1})" =~ $__CALLER_REGX ]]; then
            src="${BASH_REMATCH[3]}"
            func_i=$(( $(( ${FROM_STACKFRAME:-1} + 1 )) ))
            func=${FUNCNAME[$func_i]}
        else
            src="$0"
        fi

        # ... if the cwd is changed, realpath may not work, so fall back to just $src
        f=$(realpath -- "$src" 2>/dev/null); [[ -z "$f" ]] && f=$src
        if [[ -n "$DEBUG_ABS_PATHS" ]]; then
            str=$f
        else
            str=$(basename "$f")
        fi
        [[ -n "$func" ]] && str="$str:$func()"
        echo "$str"
    fi
}


# @desc prints ERROR to STDERR, with context prefix and
# stacktrace.
#
# Caller can pass multiple quoted strings as each line
# of the error msg.
# _\n_ within a str is also treated as newline.
#
# @example
#    # script.sh
#    some_func { e "... went wrong!\nBadly" "Really Badly." }
#    some_func
#
#   # ... would print something like:
#   # ERROR script.sh:some_func(): ... went wrong!
#   # ERROR script.sh:some_func(): ... Badly
#   # ERROR script.sh:some_func(): ... Really Badly.
#   # ERROR script.sh:some_func(): TRACE:
#   # ERROR script.sh:some_func(): some_func() (line 2)
#   # ERROR script.sh:some_func():       main() (line 3)
#
e() {
    local IFS=''
    local pre
    
    pre="ERROR $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: $line" >&2
    done < <(echo -e "$*\n")

    while read -r line; do
        echo -e "$pre: ${__TRED}$line${__TRESET}" >&2
    done < <(echo -e "TRACE:\n$(__stacktrace)")
}

# @desc prints INFO msg (STDOUT) with context prefix.
#
# Caller can pass multiple quoted strings as each line
# of the msg.
# _\n_ within a str is also treated as newline.
#
# @example
#   i "msg line 1" "line 2\nline3"
#
#   # ... would print something like:
#   # INFO script.sh:main(): ... msg line 1
#   # INFO script.sh:main(): ... line 2
#   # INFO script.sh:main(): ... line 3
#
i() {
    [[ -n "$QUIET" ]] && return 0
    local IFS=''
    local pre
    
    pre="INFO $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: $line"
    done < <(echo -e "$*")
}

# @desc prints DEBUG msg (STDERR) with context prefix.
#
# Caller can pass multiple quoted strings as each line
# of the msg.
# _\n_ within a str is also treated as newline.
#
# Set DEBUG in env to turn on msgs at this level.
#
# Set DEBUG_ABS_PATHS in env to have abs paths to the source
# file in each DEBUG msgs.
#
# Set QUIET in the env to ignore DEBUG settings.
#
# @example
#   d "msg line 1" "line 2\nline3"
d() {
    [[ -n "$QUIET" ]] && return 0
    [[ -z "$DEBUG" ]] && return 0
    local IFS=''
    local pre
    
    pre="DEBUG $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: ${__TDEBUG}$line${__TRESET}" >&2
    done < <(echo -e "$*")
}

# @desc as with e(), but msg text is coloured
red_e() {
    local IFS=''
    local pre
    
    pre="ERROR $(set_log_prefix)" 
    while read -r line ; do
        echo -e "$pre: ${__TRED}$line${__TRESET}" >&2
    done < <(echo -e "$*\n")

    while read -r line; do
        echo -e "$pre: ${__TRED}$line${__TRESET}" >&2
    done < <(echo -e "TRACE:\n$(__stacktrace)")
}

# @desc as with i(), but msg text is highlighted
bold_i() {
    [[ -n "$QUIET" ]] && return 0
    local IFS=''
    local pre
    
    pre="INFO $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: ${__TBOLD}$line${__TRESET}"
    done < <(echo -e "$*")
}

# @desc as with i(), but msg text is coloured.
yellow_i() {
    [[ -n "$QUIET" ]] && return 0
    local IFS=''
    local pre
    
    pre="INFO $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: ${__TYELLOW}$line${__TRESET}"
    done < <(echo -e "$*")
}

# @desc as with i(), but msg text is coloured.
green_i() {
    [[ -n "$QUIET" ]] && return 0
    local IFS=''
    local pre
    
    pre="INFO $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: ${__TGREEN}$line${__TRESET}"
    done < <(echo -e "$*")
}

# @desc as with i(), but msg text is coloured.
blue_i() {
    [[ -n "$QUIET" ]] && return 0
    local IFS=''
    local pre
    
    pre="INFO $(set_log_prefix)"
    while read -r line ; do
        echo -e "$pre: ${__TBLUE}$line${__TRESET}"
    done < <(echo -e "$*")
}

# __stacktrace()
# stacktrace should be called from a logging function
# e.g. e() or i(). This logging func will be index 0 when
# caller is invoked by __stacktrace().
# We're not interested in the logging function, so by default we choose
# index 1 (the thing that invoked the logging func).
#
# If you need to start from a different index, set
# $FROM_STACKFRAME in env to index num, before calling __stacktrace()
#
__stacktrace() {
    local start_index=${FROM_STACKFRAME:-1}
    local frame=$start_index str=""

    while true; do
        local st="" ln="" func="" file="" indent="" tmpl=""

        st=$(caller "$frame") || break

        [[ "$st" =~ $__CALLER_REGX ]] \
        && ln="${BASH_REMATCH[1]}" \
        && func="${BASH_REMATCH[2]}" \
        && file="${BASH_REMATCH[3]}"

        tmpl="%$(( $(( frame - start_index )) * 2 ))s"
        #shellcheck disable=SC2059
        indent="$(printf $tmpl ' ')"

        str_fmt="${indent}${func}() (file: $file, line: $ln)\n"
        str="$str$str_fmt"
        ((frame++))
    done
    echo "$str"
}

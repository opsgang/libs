# vim: et sr sw=4 ts=4 smartindent syntax=sh:
#
# @overview
# >
# > agnostic public interface for pluggable secrets management functions.
# >

# ... defines user-defined provider e.g. ssm - see [known_providers()](#known_providers)
SECRETS_PROVIDER="${SECRETS_PROVIDER,,}"

__SECRETS_HANDLERS_DIR="$(cd $(dirname $BASH_SOURCE) && pwd)/secrets"

# @desc Configures secrets management functions to use the expected provider.
#
# Pass a valid secrets provider. See [known_providers()](#known_providers) for getting the list.
# Sets `$SECRETS_PROVIDER` for the user.
set_secrets_provider() {
    local p="$1"
    __valid_provider "$p" || return 1
    __run_init "$p" || return 1
    export SECRETS_PROVIDER="$p"
    return 0
}

__run_init() {
    if declare -f "${p}_init" &>/dev/null
    then
        d "running init function ${p}_init()"
        ${p}_init || return 1
    fi

    return 0
}

__valid_provider() {
    local p="$1" # ... provider name
    local handler_file="$__SECRETS_HANDLERS_DIR/${p}.functions"

    [[ -z "$p" ]] && red_e "expects a provider name for secrets management." && return 1

    if ! known_providers | grep -Po "(\b$p\b)" >/dev/null
    then
        red_e "valid provider names are:\n$(known_providers)"
        return 1
    fi

    # check file exists for sourcing
    if [[ ! -r "$handler_file" ]]; then
        red_e "readable handler file not found at $handler_file."
        return 1
    fi

    ! . $handler_file && red_e "unable to source $handler_file" && return 1

    __imported_required_funcs "$p" || return 1

    return 0
}

# @desc Prints supported secrets providers to STDOUT.
#
# We expect a file named after this provider that contains [required functions](#required_funcs).
#
# This is verified when [set_secrets_provider()](#set_secrets_provider) is run.
#
known_providers() {
    cat << EOF | sort | uniq
    credstash
    ssm
EOF
}

__imported_required_funcs() {
    local p="$1" # provider
    local func="" failed="" rc=0

    for func in $(required_funcs) ; do
        if ! declare -f ${func} &>/dev/null
        then
            failed="${failed}function missing: ${func}\n"
            rc=1
        fi
    done

    if [[ $rc -eq 1 ]]; then
        red_e "provider $p not implemented correctly:\n$failed"
    fi

    return $rc
}

# @desc Prints names of functions that must be defined.
# We expect them to be defined in the provider's handler file -
# the file that [set_secrets_provider()](#set_secrets_provider) sources.
#
required_funcs() {
    cat <<EOF | sort | uniq
    get_secret
    put_secret
EOF
}


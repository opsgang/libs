# vim: et sr sw=4 ts=4 smartindent syntax=sh:
#
# @overview
# >
# > Convenience funcs for git commands that get config info about a repo.
# >
# > Additionally funcs to verify the state of a repo.
# >
# > Source habitual/std.functions before calling functions in here.
# >

# path to git binary
GIT="${GIT:-git --no-pager}"

# git sha1s will be truncated to this length
GIT_SHA_LEN=${GIT_SHA_LEN:-8}

# __cd() - if user passed a path, cd to it.
__cd() {
    local d="$1"
    [[ ! -z "$d" ]] && ! cd $d 2>/dev/null && red_e "couldn't cd to $d" && return 1;
    return 0
}

###############################################################
# @section GIT INFO FUNCTIONS
###############################################################

# @desc Prints branch name (or nothing if you've checked out a tag).
# Returns 1 if current working dir is not in a git repo.
git_branch() {
    r=$(${GIT} rev-parse --abbrev-ref HEAD)
    [[ -z "$r" ]] && e "$(pwd) is not in a git repo" && return 1
    [[ "$r" == "HEAD" ]] && r=""
    echo "$r"
}

# @desc Prints remote.origin.url from current dir's git config.
# Empty str if not set.
git_repo() {
    ${GIT} config remote.origin.url || echo ""
}

# @desc Prints sha of current commit - up to $GIT\_SHA\_LEN chars.
git_sha() {
    ${GIT} rev-parse --short=${GIT_SHA_LEN} --verify HEAD
}

# @desc Prints out the git-tag on the current commit (exact match only)
# Prints empty str if there is none.
git_tag() {
    ${GIT} describe --exact-match --tags 2>/dev/null || echo ""
}

# @desc Prints user.name (from git config)
# Returns 1 if not set.
git_user() {
    ${GIT} config user.name || return 1
}

# @desc Prints user.email (from git config)
# Returns 1 if not set.
git_email() {
    ${GIT} config user.email || return 1
}

# @desc Prints user.name user.email (from git config)
# Returns 1 if user.name not set.
git_id() {
    local u=$(git_user)
    local e=$(git_email)
    [[ -z "$u" ]] && echo "" && return 1
    echo $u $e
}

# @desc Outputs a str formed of repo, sha1, tag and branch info.
# User can pass a path to use for getting the git info
#
# @example
#   # ... produce info str for current dir
#   out=$(git_info_str)
#
#   # ... produce info str for /my/project/repo
#   out=$(git_info_str /my/project/repo)
#
#   # example $out
#   # repo:git@github.com:opsgang/blah sha1:bc342d35 tag:-no tag- branch:master
#
git_info_str() {
    local d="$1" # optional dir path
    local branch="" repo="" sha="" tag=""

    (
        __cd $d || exit 1
        ! in_git_clone && e "can't get git info for $(pwd) - not a git dir" && return 1

        repo="$(git_repo)"
        sha="$(git_sha)"
        tag="$(git_tag)"
        branch="$(git_branch)" || exit 1

        _git_info_str "$repo" "$sha" "$tag" "$branch"

    ) || return 1
}

# _git_info_str():
# called by git_info() and git_vars()
# You must double quote args when calling this function, as we need to preserve empty values.
_git_info_str() {
    local r="${1:--no remote-}" # repo   || empty str
    local s="$2"                # sha1   || can not be empty
    local t="${3:--no tag-}"    # tag    || empty str
    local b="${4:--no branch-}" # branch || empty str

    [[ -z "$s" ]] && e "... requires a sha1 as second param" && return 1

    echo "repo:$r sha1:$s tag:${t} branch:$b"
}

# @desc Convenience function. Gets git info for current dir
# Exports vars you can use for governance info.
#
# EXPORTED VARS:
#
#  $GIT\_REPO, $GIT\_BRANCH, $GIT\_TAG, $GIT\_SHA,
#
#  $GIT\_USER, $GIT\_EMAIL, $GIT\_ID.
#
#  Also $GIT\_INFO - [see git\_info\_str()](#git_info_str) for example value.
#
# Each var has a corresponding function with the same name lowercased. See each
# one's doc to understand its output.
#
# **CAVEAT**: if you run this in a sub-shell e.g. $( git\_vars ) or ( git\_vars )
# the values will not be available outside of the sub-shell.
#
# @example
#   git_vars || exit 1
#   echo "I am in a local clone of $GIT_REPO on branch $GIT_BRANCH"
#
git_vars() {
    ! in_git_clone && e "... $PWD is not inside a git repo" && return 1

    GIT_BRANCH="$(git_branch)" || return 1 ; export GIT_BRANCH
    export GIT_TAG="$(git_tag)"
    export GIT_REPO="$(git_repo)"
    export GIT_SHA="$(git_sha)"
    export GIT_USER="$(git_user)"
    export GIT_EMAIL="$(git_email)"
    export GIT_ID="$(git_id)" # git user and email, space separated
    export GIT_INFO=$(_git_info_str "$GIT_REPO" "$GIT_SHA" "$GIT_TAG" "$GIT_BRANCH")

}

###############################################################
# @section VALIDATION FUNCTIONS
###############################################################

# @desc runs [check\_for\_changes](#check_for_changes) and 
# [sha_in_origin](#sha_in_origin) for **current dir**.
#
# If $DEVMODE is set, the checks will be skipped.
#
# @example
#   # ... check whether what I'm deploying is reproducible
#   no_unpushed_changes || exit 1
#
#   # ... skip checks for now, I'm engineering ...
#   DEVMODE=true no_unpushed_changes || exit 1
#
no_unpushed_changes() {
    [[ ! -z "${DEVMODE}" ]] && yellow_i "DEVMODE - skipping git checks" && return 0;

    local d=$(pwd)
    local sha=$(git_sha)

    check_for_changes "$d" || return 1
    sha_in_origin "$sha" || return 1

    return 0
}

# @desc checks a dir (defaults to current dir) for git changes.
#
# Returns 1 if there are uncommitted git changes.
#
# User can pass the dir path as an arg.
# If not the current dir is checked.
#
# @example
#   check_for_changes "/in/my/cloned/dir" || exit 1
#
check_for_changes() {
    local d="${1:-$(pwd)}"
    i "... checking for uncommitted changes in $d"
    (
        __cd $d || exit 1

        ! in_git_clone && red_e "$(pwd) is not a git dir" && return 1;
        git &>/dev/null --no-pager status # make sure index is up-to-date
        if git diff-index --quiet HEAD --
        then
            i "... none found."
        else
            msg="... local changes in $(pwd)"
            msg="$msg\n... Commit them (tag the commit if wanted) then run this."
            red_e "$msg"
            exit 1
        fi
    ) || return 1
}

# @desc makes sure a git commit exists in the remote origin.
# Returns 1 if commit does not exist.
#
# Defaults to using the value of $GIT_SHA, or else the
# current dir's HEAD sha1.
#
# @example
#   # sha1 438704b exists in origin?
#   sha_in_origin 438704b || exit 1
#
#   # val of $GIT_SHA is in origin?
#   GIT_SHA=438704b sha_in_origin || exit 1
#
#   # ... current dir's HEAD sha1 exists in origin?
#   sha_in_origin || exit 1
#
sha_in_origin() {
    local sha=${1:-${GIT_SHA:-$(git_sha)}}
    local b=""

    i "... checking git sha $sha exists in origin"

    if [[ -z "${sha}" ]]; then
        red_e "no git_sha passed as param, or \$GIT_SHA or sha of current dir."
        return 1
    fi

    b=$(git branch -r --contains ${sha} 2>/dev/null)
    if [[ $? -ne 0 ]] || [[ -z "$b" ]]; then
        red_e "This commit ($sha) does not exist on origin."
        red_e "Did you push these changes?"
        return 1
    else
        i "... all looking copacetic."
        return 0
    fi
}

# @desc Tests whether a path is inside a git-cloned dir
# Returns 1 if not.
#
# User can pass path to test as arg. Defaults to current dir.
#
# @example
#
#   in_git_clone || exit 1 # current dir is in a git clone?
#
#   in_git_clone /my/project/file || exit 1 # is file inside a git clone?
#
in_git_clone() {
    local rc=0
    local d="$1"
    (
        __cd $d || exit 1
        git --no-pager rev-parse --is-inside-work-tree >/dev/null 2>&1
    ) || rc=1
    return $rc
}

